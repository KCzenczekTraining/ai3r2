"""
This script automates a conversation with an external API and OpenAI's GPT model.
It performs the following steps:
1. Sends an initial POST request to initiate the conversation.
2. Queries OpenAI's GPT model for an answer to the received question.
3. Sends the answer back to the API and retrieves a hidden phrase.

Ensure the `.env` file contains the required environment variables:
- `OPENAI_API_KEY`: API key for OpenAI.
- `ENDPOINT_s01e02`: Endpoint URL for the conversation API.
"""

import os
import requests
from dotenv import load_dotenv
from openai import OpenAI, OpenAIError


# Load environment variables
load_dotenv()


# Set OpenAI API key
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)


def initiate_conversation(endpoint: str) -> tuple[int, str]:
    """Send the initial POST request to start the conversation."""
    initial_payload = {
        "text": "READY",
        "msgID": 0
    }
    response = requests.post(endpoint, json=initial_payload)
    response.raise_for_status()
    data = response.json()
    return data.get("msgID"), data.get("text")


def query_openai(question: str) -> str:
    """Query OpenAI's GPT model for an answer to the question."""
    system_prompt = (
        "You are a helpful assistant that speaks many languages, but answers ONLY in English, "
        "even if a question is in another language. Please answer as short as possible. "
        "<rules> If user's question is about: \n"
        "- the capital city of Poland, the answer is Krak√≥w.\n"
        "- the number associate with the book The Hitchhiker's Guide to the Galaxy, the answer is 69,\n"
        "- the current year, the answer is 1999 </rules>"
    )

    try:
        completion = client.responses.create(
            model="gpt-4",
            input=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": question}
            ],
            temperature=1,
            max_output_tokens=50
        )
        response = completion.output_text
        return response
    except OpenAIError as e:
        print(f"Error querying OpenAI API: {e}")
        return ""


def send_response(endpoint: str, msgID: int, llm_response: str) -> str:
    """Send the LLM response back to the API and retrieve the hidden phrase."""
    response_payload = {
        "text": llm_response,
        "msgID": msgID
    }
    response = requests.post(endpoint, json=response_payload)
    response.raise_for_status()
    final_data = response.json()
    print(f"LLM response sent successfully. Received: {final_data}")
    return final_data


def main():
    """Main function to orchestrate the conversation."""
    endpoint = os.getenv("ENDPOINT_s01e02")

    try:
        msgID, question = initiate_conversation(endpoint)
        llm_response = query_openai(question)
        hidden_phrase = send_response(endpoint, msgID, llm_response)
        print(f"Hidden phrase: {hidden_phrase.get('text')}")
    except requests.RequestException as e:
        print(f"Error during API communication: {e}")
    except OpenAIError as e:
        print(f"Error querying OpenAI API: {e}")


if __name__ == "__main__":
    main()